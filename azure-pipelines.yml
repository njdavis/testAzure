# Build Docker image for this app using Azure Pipelines
# http://docs.microsoft.com/azure/devops/pipelines/languages/docker?view=vsts
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'pythonsample:$(Build.BuildId)'
  # define two more variables dockerId and dockerPassword in the build pipeline in UI
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'd94cc24e-004a-466f-97a5-642ec3f08191'
  imageRepository: 'hightidebackend'
  containerRegistry: 'hightide.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: 3.5
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel django
    pip install -r requirements.txt
    pip install unittest-xml-reporting
    pip install docker-compose
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'    
    docker-compose run --rm app sh -c "python manage.py test --no-input && flake8"
  condition: succeededOrFailed()
  displayName: 'Run tests'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'

- task: Docker@2
  inputs:
    containerRegistry: 'HighTide'
    repository: 'njdavis/testAzure'
    tags: latest
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'

